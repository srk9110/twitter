{"version":3,"sources":["fbInstance.js","components/AuthForm.js","routes/auth.js","components/Tweet.js","components/TweetFactory.js","routes/home.js","routes/profile.js","components/Navigation.js","components/router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthFrom","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","size","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNetTweet","toggleEditing","doc","id","update","onDeleteClick","ok","confirm","delete","refFromURL","attachmentUrl","autoFocus","src","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorID","collection","add","maxLength","htmlFor","faPlus","accept","files","theFile","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","style","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","tweetArray","docs","map","marginTop","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","updateProfile","history","useHistory","getMyTweets","where","get","signOut","push","Navigation","to","color","faUserCircle","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAeAA,IAASC,cATc,CACnBC,OAAQC,0CACRC,WAAYD,gCACZE,UAAWF,gBACXG,cAAeH,4BACfI,kBAAmBJ,eACnBK,MAAOL,8CAKJ,IAAMM,EAAmBT,IAGnBU,EAAcV,IAASW,OAGvBC,EAAYZ,IAASa,YAGrBC,EAAiBd,IAASe,UC0CxBC,EAjEA,WAAK,IAAD,EAEWC,mBAAS,IAFpB,mBAERC,EAFQ,KAEDC,EAFC,OAGiBF,mBAAS,IAH1B,mBAGRG,EAHQ,KAGEC,EAHF,OAIqBJ,oBAAS,GAJ9B,mBAIRK,EAJQ,KAIIC,EAJJ,OAKWN,mBAAS,IALpB,mBAKRO,EALQ,KAKDC,EALC,KASTC,EAAU,SAACC,GAAS,IAAD,EACUA,EAAxBC,OAAQC,EADM,EACNA,KAAMC,EADA,EACAA,MACX,UAAPD,EAECV,EAASW,GACI,aAAPD,GAENR,EAAYS,IAMdC,EAAQ,uCAAE,WAAOJ,GAAP,eAAAK,EAAA,yDAGZL,EAAMM,iBAHM,UAMLX,EANK,gCASSZ,EAAYwB,+BACrBhB,EAAOE,GAVP,OASJe,EATI,+CAcSzB,EAAY0B,2BACrBlB,EAAOE,GAfP,QAcJe,EAdI,eAkBRE,QAAQC,IAAIH,GAlBJ,kDAoBTV,EAAS,KAAMc,SApBN,0DAAF,sDA8Bd,OACA,qCACA,uBAAMR,SAAUA,EAAUS,UAAU,YAApC,UACK,uBAAOA,UAAU,YAAYX,KAAK,QAAQY,KAAK,QAAQC,YAAY,QAAQC,UAAQ,EAACb,MAAOZ,EAAOQ,SAAUA,IAC5G,uBAAOc,UAAU,YAAYX,KAAK,WAAWY,KAAK,WAAWC,YAAY,WAAWC,SAAUvB,EAAUM,SAAUA,IAClH,uBAAOc,UAAU,aAAaC,KAAK,SAASX,MAAOR,EAAa,iBAAmB,YAClFE,GAAS,sBAAMgB,UAAU,YAAhB,SAA6BhB,OAE3C,sBAAMoB,QAVe,kBAAMrB,GAAc,SAACsB,GAAD,OAASA,MAUpBL,UAAU,aAAxC,SAAuDlB,EAAW,UAAY,uB,wBCxBpEwB,EAhCJ,WAGP,IAAMC,EAAa,uCAAC,WAAOpB,GAAP,mBAAAK,EAAA,4DAKN,YAJKH,EAAOF,EAAfC,OAAQC,MAKXmB,EAAS,IAAIvC,EAAiBE,KAAKsC,mBACtB,WAAPpB,IACNmB,EAAS,IAAIvC,EAAiBE,KAAKuC,oBARvB,SAUCxC,EAAYyC,gBAAgBH,GAV7B,OAUVb,EAVU,OAWhBE,QAAQC,IAAIH,GAXI,2CAAD,sDAcnB,OACA,sBAAKK,UAAU,gBAAf,UACI,cAAC,IAAD,CAAiBA,UAAU,cAAcY,KAAMC,IAAWC,KAAK,OAC/D,cAAC,EAAD,IACA,sBAAKd,UAAU,cAAf,UACI,yBAAQA,UAAU,aAAaI,QAASG,EAAelB,KAAK,SAA5D,UACI,cAAC,IAAD,CAAiBuB,KAAMG,MAD3B,2BAGA,yBAAQf,UAAU,aAAaI,QAASG,EAAelB,KAAK,SAA5D,UACI,cAAC,IAAD,CAAiBuB,KAAMI,MAD3B,kC,wBCmDGC,EA9ED,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAAW,EAEL1C,oBAAS,GAFJ,mBAE1B2C,EAF0B,KAEjBC,EAFiB,OAID5C,mBAASyC,EAASI,MAJjB,mBAI1BC,EAJ0B,KAIhBC,EAJgB,KAO3BC,EAAgB,kBAAMJ,GAAW,SAAAhB,GAAI,OAAGA,MACxCd,EAAQ,uCAAE,WAAOJ,GAAP,SAAAK,EAAA,6DACZL,EAAMM,iBACNI,QAAQC,IAAIoB,EAASI,KAAMC,GAFf,SAGNnD,EAAUsD,IAAV,iBAAwBR,EAASS,KAAMC,OAAO,CAChDN,KAAMC,IAJE,OAMZF,GAAW,GANC,2CAAF,sDAeRQ,EAAa,uCAAC,4BAAArC,EAAA,yDAEVsC,EAAKC,QAAQ,mCACnBlC,QAAQC,IAAIgC,IACTA,EAJa,gCAMN1D,EAAUsD,IAAV,iBAAwBR,EAASS,KAAMK,SANjC,uBAON1D,EAAe2D,WAAWf,EAASgB,eAAeF,SAP5C,2CAAD,qDAanB,OACI,qBAAKhC,UAAU,QAAf,SAEQoB,EACA,mCAEID,GAAW,qCACX,uBAAM5B,SAAUA,EAAUS,UAAU,sBAApC,UACI,uBACIC,KAAK,OACLC,YAAY,mBACZZ,MAAOiC,EACPrC,SAhCP,SAACC,GAAS,IAEXG,EAASH,EAAjBC,OAAQE,MACRkC,EAAYlC,IA8BIa,UAAQ,EACRgC,WAAS,EACTnC,UAAU,cAEd,uBAAOC,KAAK,SAASX,MAAM,eAAeU,UAAU,eAExD,wBAAQI,QAASqB,EAAezB,UAAU,oBAA1C,yBAMA,qCACI,6BAAKkB,EAASI,OAEbJ,EAASgB,eAAiB,qBAAKE,IAAKlB,EAASgB,gBAE7Cf,GACG,sBAAKnB,UAAU,iBAAf,UACI,sBAAMI,QAASyB,EAAf,SAA8B,cAAC,IAAD,CAAiBjB,KAAMyB,QACrD,sBAAMjC,QAASqB,EAAf,SAA8B,cAAC,IAAD,CAAiBb,KAAM0B,iB,QC0BtEC,EA7FI,SAAC,GAAa,IAAZC,EAAW,EAAXA,QAAW,EAEH/D,mBAAS,IAFN,mBAEtBgE,EAFsB,KAEfC,EAFe,OAGKjE,mBAAS,IAHd,mBAGtBkE,EAHsB,KAGVC,EAHU,KAKtBrD,EAAQ,uCAAC,WAAOJ,GAAP,qBAAAK,EAAA,yDACXL,EAAMM,iBAEFyC,EAAc,GACF,KAAbS,EAJQ,wBAQDE,EAAgBvE,EAAewE,MAAMC,MAArB,UAA8BP,EAAQQ,IAAtC,YAA6CC,gBAR5D,SAWgBJ,EAAcK,UAAUP,EAAW,YAXnD,cAWDQ,EAXC,gBAaaA,EAASL,IAAIM,iBAb1B,OAaPlB,EAbO,sBAgBLhB,EAAS,CACXI,KAAKmB,EACLY,UAAWC,KAAKC,MAChBC,UAAWhB,EAAQQ,IACnBd,iBApBO,UAyBL9D,EAAUqF,WAAW,UAAUC,IAAIxC,GAzB9B,QA0BXwB,EAAS,IACTE,EAAc,IA3BH,4CAAD,sDA2Dd,OACA,uBAAMrD,SAAUA,EAAUS,UAAU,cAApC,UACI,sBAAKA,UAAU,0BAAf,UACI,uBAAOA,UAAU,sBAAsBV,MAAOmD,EAAOvD,SAhC9C,SAACC,GAAS,IACNG,EAAQH,EAAhBC,OAAQE,MACfoD,EAASpD,IA8BoEW,KAAK,OAAOC,YAAY,uBAAuByD,UAAW,MACnI,uBAAO1D,KAAK,SAASX,MAAM,SAASU,UAAU,2BAElD,wBAAO4D,QAAQ,cAAc5D,UAAU,sBAAvC,UACI,gDACA,cAAC,IAAD,CAAiBY,KAAMiD,SAEvB,uBAAOlC,GAAG,cAAc1B,KAAK,OAAO6D,OAAO,UAAU5E,SAlCzC,SAACC,GAEjBU,QAAQC,IAAIX,EAAMC,OAAO2E,OAFC,IAKpBC,EAFkB7E,EAAjBC,OAAQ2E,MAEK,GAEdE,EAAO,IAAIC,WAEjBD,EAAOE,UAAU,SAACC,GAEdvE,QAAQC,IAAIsE,GAFkB,IAGTC,EAAUD,EAAzBE,cAAeD,OACrBzB,EAAcyB,IAGlBJ,EAAOM,cAAcP,IAmBjBQ,MAAO,CAAEC,QAAS,KACjB9B,GACG,sBAAK3C,UAAU,0BAAf,UACI,qBACIoC,IAAKO,EACL6B,MAAO,CACHE,gBAAiB/B,KAEzB,sBAAK3C,UAAU,qBAAqBI,QAvBvB,WACzBwC,EAAc,KAsBF,UACI,2CACA,cAAC,IAAD,CAAiBhC,KAAM+D,gBCvChCC,EA/CH,SAAC,GAAe,IAAdpC,EAAa,EAAbA,QAAa,EAEG/D,mBAAS,IAFZ,mBAEjBoG,EAFiB,KAETC,EAFS,KAoCvB,OAbAC,qBAAU,WAIN3G,EAAUqF,WAAW,UAAUuB,QAAQ,YAAY,OAAOC,YAAW,SAAAC,GACjE,IAAMC,EAAWD,EAASE,KAAKC,KAAI,SAAA3D,GAAG,oBAClCC,GAAGD,EAAIC,IACJD,EAAI/B,WAEXmF,EAAUK,QAEhB,IAGF,sBAAKnF,UAAU,YAAf,UACI,cAAC,EAAD,CAAcwC,QAASA,IACvB,qBAAKgC,MAAO,CAACc,UAAW,IAAxB,SACKT,EAAOQ,KAAI,SAAC5C,GAAD,OACR,cAAC,EAAD,CAAsBvB,SAAUuB,EAAOtB,QAASsB,EAAMe,YAAYhB,EAAQQ,KAA9DP,EAAMd,aCuBnB4D,EAlED,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,YAAahD,EAAa,EAAbA,QAAa,EAGI/D,mBAAS+D,EAAQiD,aAHrB,mBAG/BC,EAH+B,KAGfC,EAHe,KAUhCpG,EAAQ,uCAAC,WAAOJ,GAAP,SAAAK,EAAA,yDACXL,EAAMM,iBACH+C,EAAQiD,cAAcC,EAFd,gCAGDlD,EAAQoD,cAAc,CACxBH,YAAaC,IAJV,OAMPF,IANO,2CAAD,sDAWRK,EAAUC,cAOVC,EAAW,uCAAG,4BAAAvG,EAAA,sEAGGpB,EAAUqF,WAAW,UACvCuC,MAAM,YAAY,KAAMxD,EAAQQ,KAGhCgC,QAAQ,YAAY,OACpBiB,MARe,OAGVpB,EAHU,OAShBhF,QAAQC,IAAI+E,EAAOO,KAAKC,KAAI,SAAC3D,GAAD,OAAOA,EAAI/B,WATvB,2CAAH,qDAgBjB,OAJAoF,qBAAU,WACNgB,MACF,IAGE,mCACA,sBAAK/F,UAAU,YAAf,UACI,uBAAMT,SAAUA,EAAUS,UAAU,cAApC,UACI,uBACId,SA5CD,SAACC,GAAS,IACNG,EAASH,EAAjBC,OAAQE,MACfqG,EAAkBrG,IA2CNW,KAAK,OACLC,YAAY,eACZZ,MAAOoG,IACX,uBAAO1F,UAAU,UAAUC,KAAK,SAASX,MAAM,iBAC/CkF,MAAO,CACHc,UAAW,SAInB,sBAAMtF,UAAU,2BACZI,QAtCQ,WAChBlC,EAAYgI,UACZL,EAAQM,KAAK,MAmCT,2BCtCGC,EAnBE,SAAC,GAAD,IAAE5D,EAAF,EAAEA,QAAF,OACjB,8BACI,+BACI,6BACI,cAAC,IAAD,CAAM6D,GAAG,IAAIrG,UAAU,SAAvB,SACI,cAAC,IAAD,CAAiBY,KAAMC,IAAWC,KAAK,KAAKwF,MAAM,gBAE1D,6BACI,eAAC,IAAD,CAAMD,GAAG,WAAWrG,UAAU,YAA9B,UACI,cAAC,IAAD,CAAiBY,KAAM2F,IAAczF,KAAK,KAAKwF,MAAM,YACrD,uBAAM9B,MAAO,CAACc,UAAU,IAAxB,UACK9C,EAAQiD,YADb,0CCyBDe,EA/BG,SAAC,GAAwC,IAAvChB,EAAsC,EAAtCA,YAAaiB,EAAyB,EAAzBA,WAAYjE,EAAa,EAAbA,QACzC,OACI,eAAC,IAAD,WAEKiE,GAAc,cAAC,EAAD,CAAYjE,QAASA,IAC5C,cAAC,IAAD,UACKiE,EACD,mCACA,sBAAKzG,UAAU,kBAAf,UACI,cAAC,IAAD,CAAO0G,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CAAMnE,QAASA,MAEnB,cAAC,IAAD,CAAOkE,OAAK,EAACC,KAAK,WAAlB,SACI,cAAC,EAAD,CAASnE,QAASA,EAASgD,YAAaA,WAO3C,mCACI,cAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAlB,SACG,cAAC,EAAD,cC0BLC,MAjDf,WAAe,MAESnI,oBAAS,GAFlB,mBAENoI,EAFM,KAEAC,EAFA,OAGgBrI,mBAAS,MAHzB,mBAGN+D,EAHM,KAGGuE,EAHH,KAoCb,OA7BAhC,qBAAU,WACR7G,EAAY8I,oBAAmB,SAACC,GAK5BF,EAJCE,EAIU,CACTxB,YAAawB,EAAKxB,YAClBzC,IAAIiE,EAAKjE,IACT4C,cAAe,SAACsB,GAAD,OAAQD,EAAKrB,cAAcsB,KAGjC,MAEbJ,GAAQ,QAEV,IAcA,qCAGDD,EAAO,cAAC,EAAD,CAAWJ,WAAYU,QAAQ3E,GAAUA,QAASA,EAASgD,YAdjD,WAChB,IAAMyB,EAAO/I,EAAYkJ,YACzBL,EAAW,CACTtB,YAAawB,EAAKxB,YAClBzC,IAAIiE,EAAKjE,IACT4C,cAAe,SAACsB,GAAD,OAAQD,EAAKrB,cAAcsB,SASkD,iBAIhG,4CAAgB,IAAI5D,MAAO+D,cAA3B,kBChDFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.140f4162.chunk.js","sourcesContent":["import firebase from \"firebase/app\"; \r\n//8.0 버전 이상에선 import * as 를 사용하지 않는다 -> 컴파일 에러\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID ,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\n//firebase에 관련된 모든 것을 export하지 않고 authService만 export하기!\r\nexport const authService = firebase.auth();\r\n\r\n//firebase database\r\nexport const dbService = firebase.firestore();\r\n\r\n//firebase firestore\r\nexport const storageService = firebase.storage();","import React, {useState} from 'react';\r\nimport { authService } from 'fbInstance';\r\n\r\nconst AuthFrom=()=>{\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n   //키를 누를때마다 onChange 호출\r\n    //event로부터 정보를 받아옴(target)\r\n    const onChange =(event)=>{\r\n        const {target:{name, value}} = event;\r\n        if(name===\"email\"){\r\n            //email state를 value로 변경\r\n            setEmail(value);\r\n        } else if(name===\"password\"){\r\n            //password state를 value로 변경\r\n            setPassword(value);\r\n        }\r\n    };\r\n    \r\n    //제출키가 눌렸을때 호출\r\n    //promise를 받기 때문에 await 사용\r\n    const onSubmit =async (event)=>{\r\n        //이벤트가 일어날때마다 새로고침 되는 것을 막음\r\n        //새로고침이 되면 state에 저장된 내용이 다 사라지게 됨\r\n        event.preventDefault();\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                //create Account\r\n                //authService\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            } else {\r\n                //Log In\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            }\r\n            console.log(data);\r\n        } catch(error){\r\n           setError(error.message);\r\n        }\r\n    };\r\n    //여기까지하면 firebase authencation에 유저가 등록된다.\r\n\r\n    //setNewAccount함수를 실행하는 함수를 만들어줌 \r\n    //이전값을 가져와서 반대되는 값을 리턴해줄거임\r\n    //Sign In text <-> Create Account text\r\n    const toggleAccount = () => setNewAccount((prev)=>!prev);\r\n\r\n    return (\r\n    <>\r\n    <form onSubmit={onSubmit} className=\"container\">\r\n         <input className=\"authInput\" name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange}/>\r\n         <input className=\"authInput\" name=\"password\" type=\"password\" placeholder=\"Password\" required={password} onChange={onChange}/>\r\n         <input className=\"authSubmit\" type=\"submit\" value={newAccount ? \"Create Account\" : \"Sign In\"}/>\r\n         {error && <span className=\"authError\">{error}</span>}\r\n     </form>\r\n     <span onClick={toggleAccount} className=\"authToggle\" >{newAccount?\"Sign In\" : \"Create Account\"}</span>\r\n     </>\r\n    );\r\n};\r\n\r\nexport default AuthFrom;","import AuthFrom from 'components/AuthForm';\r\nimport { authService, firebaseInstance } from 'fbInstance';\r\nimport React from 'react';\r\nimport '../style.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTwitter,faGoogle,faGithub } from '@fortawesome/free-brands-svg-icons'\r\n\r\nconst Auth=()=> {\r\n    \r\n    //소셜 로그인(구글, 깃허브)\r\n    const onSocialClick=async (event)=>{\r\n        const {target:{name}}=event;\r\n        \r\n        let provider;\r\n\r\n        if(name===\"google\"){\r\n            provider=new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if(name===\"github\"){\r\n            provider=new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data=await authService.signInWithPopup(provider);\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n    <div className=\"authContainer\">\r\n        <FontAwesomeIcon className=\"twitterIcon\" icon={faTwitter} size=\"3x\" />\r\n        <AuthFrom />\r\n        <div className=\"authButtons\">\r\n            <button className=\"authButton\" onClick={onSocialClick} name=\"google\">\r\n                <FontAwesomeIcon icon={faGoogle}/> Continue with Google  \r\n                </button>\r\n            <button className=\"authButton\" onClick={onSocialClick} name=\"github\">\r\n                <FontAwesomeIcon icon={faGithub}/> Continue with Github  \r\n                </button>\r\n        </div>\r\n    </div>\r\n        );\r\n    };\r\nexport default Auth;","import { dbService, storageService } from 'fbInstance';\r\nimport React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({tweetObj, isOwner})=>{\r\n    //editing mode인가 아닌가\r\n    const [editing, setEditing]=useState(false);\r\n    //tweet의 text 업데이트\r\n    const [newTweet, setNetTweet] = useState(tweetObj.text);\r\n\r\n    //수정 기능 버튼\r\n    const toggleEditing = () => setEditing(prev=>!prev);\r\n    const onSubmit =async (event)=>{\r\n        event.preventDefault();\r\n        console.log(tweetObj.text, newTweet);\r\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n            text: newTweet,\r\n        });\r\n        setEditing(false);\r\n    };\r\n    const onChange = (event)=>{\r\n        const {\r\n            target:{value},}=event;\r\n            setNetTweet(value);\r\n    };\r\n\r\n    //삭제 기능 버튼\r\n    const onDeleteClick=async()=>{\r\n        //confirm 은 확인용으로 메세지를 날리고 true/false를 반환해줌\r\n        const ok = confirm(\"Are you sure delete this tweet?\");\r\n        console.log(ok);\r\n        if(ok){\r\n            //delete\r\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n            await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n        } \r\n\r\n    }\r\n\r\n    //버튼을 보여줌\r\n    return (\r\n        <div className=\"tweet\">\r\n            {\r\n                editing ? (\r\n                <>\r\n                    {\r\n                    isOwner && <>\r\n                    <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n                        <input \r\n                            type=\"text\" \r\n                            placeholder=\"Edit your tweet!\" \r\n                            value={newTweet}\r\n                            onChange={onChange} \r\n                            required\r\n                            autoFocus\r\n                            className=\"formInput\"\r\n                        />\r\n                        <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\"/>\r\n                    </form>\r\n                    <button onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</button>\r\n                    </>\r\n                    }\r\n                    \r\n                </>\r\n                ) : (\r\n                    <>\r\n                        <h4>{tweetObj.text}</h4>\r\n                        {/*img가 있을 때만 img를 보겠다*/}\r\n                        {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl}/>}\r\n                        {/*isOwner가 true일때만 버튼을 보겠다. 내가 쓴 글일때만 보겠다*/}\r\n                        {isOwner && (\r\n                            <div className=\"tweet__actions\">\r\n                                <span onClick={onDeleteClick}><FontAwesomeIcon icon={faTrash} /></span>\r\n                                <span onClick={toggleEditing}><FontAwesomeIcon icon={faPencilAlt} /></span>\r\n                            </div>\r\n                        )}\r\n                    </>    \r\n                )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tweet;","import React, { useState } from 'react';\r\nimport {storageService,dbService} from \"fbInstance\";\r\n//랜덤 아이디 만들기\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TweetFactory=({userObj})=>{\r\n\r\n    const[tweet, setTweet] = useState(\"\");\r\n    const[attachment, setAttachment]=useState(\"\");\r\n\r\n    const onSubmit=async (event)=>{\r\n        event.preventDefault();\r\n\r\n        let attachmentUrl=\"\";\r\n        if(attachment!==\"\"){\r\n            //firebase storage의 bucket에 이미지 업로드하기\r\n            //child : 파일에 대한 reference를 가짐\r\n            //${uuidv4()} : 이미지에 랜덤 이름 주기 \r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            //참조된 곳(child)에 string 업로드(put)하기\r\n            //data_url : reader.readAsDataURL(theFile);\r\n            const response = await attachmentRef.putString(attachment,\"data_url\");\r\n            //responce에서 url로 사진 받아오기\r\n            attachmentUrl=await response.ref.getDownloadURL();\r\n        }\r\n        \r\n        const tweetObj={\r\n            text:tweet,\r\n            createdAt: Date.now(),\r\n            creatorID: userObj.uid,\r\n            attachmentUrl,\r\n        };\r\n\r\n        //firebase db인 firestore에 추가하기\r\n        //add가 promise 를 반환하기 때문에 async\r\n        await dbService.collection(\"tweets\").add(tweetObj);\r\n        setTweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n\r\n    const onChange=(event)=>{\r\n        const {target:{value}}=event;\r\n        setTweet(value);\r\n    };\r\n\r\n    const onFileChange =(event) =>{\r\n        //file 받아오기\r\n        console.log(event.target.files);\r\n        const {target:{files},}=event;\r\n        //파일을 가짐\r\n        const theFile=files[0];\r\n        //FileReader Api의 readAsDataURL 메서드로 파일을 읽을거임\r\n        const reader=new FileReader();\r\n        //바로 보이지 않기 때문에 eventlistner를 추가해야함\r\n        reader.onloadend=(finishedEvent)=>{\r\n            //파일 로드가 끝나면 이미지를 볼 수 있는 finishedEvent 안에 result 속성값 url를 가짐\r\n            console.log(finishedEvent);\r\n            const{currentTarget:{result},}=finishedEvent;\r\n            setAttachment(result);\r\n        };\r\n        //onloadend를 끝낸 뒤 여기서 파일을 읽어옴\r\n        reader.readAsDataURL(theFile);\r\n    };\r\n\r\n    //clear photo\r\n    const onClearAttachmentClick=()=>{\r\n        setAttachment(\"\");\r\n    };\r\n\r\n    return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n        <div className=\"factoryInput__container\">\r\n            <input className=\"factoryInput__input\" value={tweet} onChange={onChange} type=\"text\" placeholder=\"what's on your mind?\" maxLength={120}/>\r\n            <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\"/>           \r\n        </div>\r\n        <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n            <span>Add Photos  </span>\r\n            <FontAwesomeIcon icon={faPlus} />\r\n        </label>\r\n            <input id=\"attach-file\" type=\"file\" accept=\"image/*\" onChange={onFileChange} \r\n            style={{ opacity: 0}}/>\r\n            {attachment && \r\n                <div className=\"factoryForm__attachment\">\r\n                    <img \r\n                        src={attachment} \r\n                        style={{\r\n                            backgroundImage: attachment,\r\n                    }}/>\r\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachmentClick}>\r\n                        <span>Clear  </span>\r\n                        <FontAwesomeIcon icon={faTimes}/>\r\n                    </div>\r\n                </div>    \r\n            }\r\n    </form>\r\n    )\r\n};\r\n\r\nexport default TweetFactory;","import Tweet from 'components/Tweet';\r\nimport TweetFactory from 'components/TweetFactory';\r\nimport { dbService } from 'fbInstance';\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../style.css'\r\n\r\nconst Home= ({userObj}) => {\r\n\r\n    const[tweets, setTweets]= useState([]);\r\n\r\n    //오래된 방법이라 쓰진 않는다. snapshot을 대신 쓸거임\r\n    const getTweets=async()=>{\r\n        //get: firestore의 tweets 콜렉션에 저장된 모든 걸 QuerySnapshat으로 가져옴\r\n        const dbTweets = await dbService.collection(\"tweets\").get();\r\n        //가져온 QuerySnapShat에서 각각의 document에 접근해서 data()함수 실행\r\n        dbTweets.forEach(document=>{\r\n            //prev: 모든 이전의 tweets\r\n            //배열을 리턴할 거임\r\n            //첫번째 요소(document.data()) : 가장 최근의 document\r\n            //두번째 요소(...prev) : 이전의 document\r\n            //=>깔끔하게 tweetObject로 만들거임\r\n            const tweetObject = {\r\n                ...document.data(), //es6 pread attribute : 배열 요소를 나열함\r\n                id: document.id,\r\n            }\r\n            setTweets((prev)=>[tweetObject, ...prev]);\r\n        });\r\n    };\r\n\r\n    useEffect(()=>{\r\n        //getTweets(); 대신에 onSnapshot을 쓸거임\r\n        //onSnapshot : !!!실시간!!!으로 db의 변화를 보여줌\r\n        //re-render 를 덜하기 때문에 더 빠르다\r\n        dbService.collection(\"tweets\").orderBy(\"createdAt\",\"asc\").onSnapshot(snapshot=>{\r\n            const tweetArray=snapshot.docs.map(doc=>({\r\n                id:doc.id,\r\n                ...doc.data(),\r\n            }));\r\n            setTweets(tweetArray);\r\n        });\r\n    },[]);\r\n\r\n    return (\r\n    <div className=\"container\">\r\n        <TweetFactory userObj={userObj} />\r\n        <div style={{marginTop: 30}}>\r\n            {tweets.map((tweet)=>(\r\n                <Tweet key={tweet.id} tweetObj={tweet} isOwner={tweet.creatorID===userObj.uid}/>   \r\n            ))}\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\nexport default Home;","import { authService, dbService } from 'fbInstance';\r\nimport React, { useState,useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst Profile=({refreshUser, userObj}) => {\r\n\r\n    //새로운 유저이름으로 바꾸기\r\n    const [newDisplayName, setNewDisplayName]=useState(userObj.displayName);\r\n\r\n    const onChange=(event)=>{\r\n        const {target:{value},}=event;\r\n        setNewDisplayName(value);\r\n    };\r\n\r\n    const onSubmit=async (event)=>{\r\n        event.preventDefault();\r\n        if(userObj.displayName!==newDisplayName){\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName,\r\n            });\r\n            refreshUser();\r\n        }\r\n    };\r\n\r\n    //hook을 써서 로그아웃 후 home으로 돌아가기\r\n    const history = useHistory();\r\n    const onLogOutClick=()=>{\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    //내가 쓴 트윗들 보기\r\n    const getMyTweets = async()=>{\r\n        //콜렉선 tweets에서 creatorID가 userObj의 uid와 ==인 것을 찾아서\r\n        //가져와!\r\n        const tweets=await dbService.collection(\"tweets\")\r\n        .where(\"creatorID\",\"==\", userObj.uid)\r\n        //orderBy를 사용하면 인덱스 오류,즉 쿼리를 미리 만들라고 오류가 나는데\r\n        //오류를 보고 링크를 누르면 인덱스를 파이어베이스에서 자동으로 만들수 있음 \r\n        .orderBy(\"createdAt\",\"asc\")\r\n        .get();\r\n        console.log(tweets.docs.map((doc)=>doc.data()));\r\n    };\r\n\r\n    useEffect(()=>{\r\n        getMyTweets();\r\n    },[]);\r\n\r\n    return(\r\n        <>\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input \r\n                    onChange={onChange} \r\n                    type=\"text\" \r\n                    placeholder=\"Display Name\"\r\n                    value={newDisplayName} />\r\n                <input className=\"formBtn\" type=\"submit\" value=\"Update Profile\" \r\n                style={{\r\n                    marginTop: 10,\r\n                  }}\r\n                />\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\"\r\n                onClick={onLogOutClick}>\r\n                Log Out\r\n            </span>\r\n        </div>\r\n        </>\r\n    )};\r\nexport default Profile;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\r\n\r\nconst Navigation=({userObj})=>(\r\n<nav>\r\n    <ul>\r\n        <li>\r\n            <Link to=\"/\" className=\"toHome\">\r\n                <FontAwesomeIcon icon={faTwitter} size=\"3x\" color=\"#00acee\"/>\r\n            </Link></li>\r\n        <li>\r\n            <Link to=\"/profile\" className=\"toProfile\">\r\n                <FontAwesomeIcon icon={faUserCircle} size=\"5x\" color=\"#00acee\"/>\r\n                <span style={{marginTop:10}}>\r\n                    {userObj.displayName}의 프로필\r\n                </span>\r\n            </Link>\r\n        </li>\r\n    </ul>\r\n</nav>\r\n);\r\n\r\nexport default Navigation;","import React, { useState } from \"react\";\r\nimport {HashRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Auth from 'routes/auth';\r\nimport Home from 'routes/home';\r\nimport Profile from 'routes/profile';\r\nimport Navigation from 'components/Navigation';\r\n\r\n//<> : fragment - 많은 요소들을 render 하고 싶은데 부모요소가 없을 때 사용(div, span등을 쓰기 싫을 때)\r\n//App에서 hook으로 보낸 isLoggedIn 속성을 받아온다(true/false)\r\n//안붙이면 react Dom 오류가 생김(불편..)\r\nconst AppRouter = ({refreshUser, isLoggedIn, userObj}) => {\r\n    return (\r\n        <Router>\r\n            {/*isLoggedIn이 true여야 Navigation 불러옴*/}\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n    <Switch>\r\n        {isLoggedIn ? ( \r\n        <>\r\n        <div className=\"routerContainer\"> \r\n            <Route exact path=\"/\">\r\n                <Home userObj={userObj}/>\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n                <Profile userObj={userObj} refreshUser={refreshUser}/>\r\n            </Route>\r\n            {/*Redirect를 사용해서 home으로 돌아가기*/}\r\n            {/*<Redirect from=\"*\" to=\"/\" />*/}\r\n        </div>\r\n        </>\r\n         ) : (\r\n             <>\r\n                 <Route exact path=\"/\">\r\n                    <Auth/>\r\n                 </Route>\r\n             </>\r\n         )}\r\n    </Switch>\r\n</Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;\r\n","import React, {useEffect, useState} from 'react';\nimport AppRouter from 'components/router';\nimport {authService} from \"fbInstance\";\n\n//App은 최상단 컴포넌트\n\n//react hooks :  ustState로 array 를 반환\n//첫번째 값은 value(init), \n//두번째 값(setInit)은 value를 어덯게 할 것인지 다루는 방법\nfunction App() {\n  //파이어베이스가 초기화 하도록 기다려야함(로그인한 걸 확인하기 위해)\n  const [init, setInit]=useState(false);\n  const [userObj, setUserObj]= useState(null);\n  \n  //useEffect: 렌더링 이후에 마무리 단계에서 처리할 일들을 넣을 수 있음\n  //[props.source]: props를 관찰할 수 있음\n  useEffect(()=>{\n    authService.onAuthStateChanged((user)=>{\n      if(user){ \n        //setUserObj(user)로 할 경우 userObj가 너무 많은 정보를 담고 있어서\n        //userProfile을 업데이트 할 경우 판단상태가 길어져서 실시간으로 반영되지 않음\n        //그래서 필요한 정보만 정의하도록 크기를 줄임\n        setUserObj({\n          displayName: user.displayName,\n          uid:user.uid,\n          updateProfile: (args)=>user.updateProfile(args),\n        }); \n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  },[]);\n  \n  //userObj 새로고침(profile 변경)\n  const refreshUser=()=>{\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid:user.uid,\n      updateProfile: (args)=>user.updateProfile(args),\n    }); \n  };\n  \n  //<>: fragement - 여러가지 요소를 렌더링하고자 하는데 부모요소가 딱히 없을 때\n  return (\n    <>\n  {/*로그인 되었다면 라우터에서 home으로 보내고 아니면 초기화 중\n      Boolean(userObj) : userObj가 있다면 true*/}\n  {init ? <AppRouter isLoggedIn={Boolean(userObj)} userObj={userObj} refreshUser={refreshUser}/>: \"Initializing..\"}\n  \n  {/*&copy; 특수기호 (동그라미 C)*/}\n  {/*{new Date().getFullYear()} react에서 현재날짜 받아오는 법-무조건 { }로 감싸야함*/}\n  <footer>&copy; {new Date().getFullYear()} Twitter</footer>\n  </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}